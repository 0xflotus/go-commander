{
  "name": "Go-commander",
  "tagline": "Go library to simplify CLI workflow",
  "body": "[![Go Report\r\nCard](https://goreportcard.com/badge/github.com/Yitsushi/go-commander)](https://goreportcard.com/report/github.com/Yitsushi/go-commander)\r\n\r\nThis is a simple Go library to manage commands for your CLI tool.\r\nEasy to use and now you can focus on Business Logic instead of building\r\nthe command routing.\r\n\r\n### What this library does for you?\r\n\r\nManage your separated commands. How? Generates a general help and command\r\nspecific helps for your commands. If your command fails somewhere\r\n(`panic` for example), commander will display the error message and\r\nthe command specific help to guide your user.\r\n\r\n### Install\r\n\r\n```\r\n$ go get https://github.com/Yitsushi/go-commander\r\n```\r\n\r\n### Sample output _(from [totp-cli](https://github.com/Yitsushi/totp-cli))_\r\n\r\n```\r\n$ totp-cli help\r\n\r\nchange-password                   Change password\r\nupdate                            Check and update totp-cli itself\r\nversion                           Print current version of this application\r\ngenerate <namespace>.<account>    Generate a specific OTP\r\nadd-token [namespace] [account]   Add new token\r\nlist [namespace]                  List all available namespaces or accounts under a namespace\r\ndelete <namespace>[.account]      Delete an account or a whole namespace\r\nhelp [command]                    Display this help or a command specific help\r\n```\r\n\r\n### Usage\r\n\r\nEvery single command has to implement `CommandHandler`.\r\nCheck [this project](https://github.com/Yitsushi/totp-cli) for examples.\r\n\r\n```\r\npackage main\r\n\r\n// Import the package\r\nimport \"github.com/Yitsushi/go-commander\"\r\n\r\n// Your Command\r\ntype YourCommand struct {\r\n}\r\n\r\n// Executed only on command call\r\nfunc (c *YourCommand) Execute(opts *commander.CommandHelper) {\r\n  // Command Action\r\n}\r\n\r\nfunc NewYourCommand(appName string) *commander.CommandWrapper {\r\n  return &commander.CommandWrapper{\r\n    Handler: &YourCommand{},\r\n    Help: &commander.CommandDescriptor{\r\n      Name:             \"your-command\",\r\n      ShortDescription: \"This is my own command\",\r\n      LongDescription:  `This is a very long\r\ndescription about this command.`,\r\n      Arguments:        \"<filename> [optional-argument]\",\r\n      Examples:         []string {\r\n        \"test.txt\",\r\n        \"test.txt copy\",\r\n        \"test.txt move\",\r\n      },\r\n    },\r\n  }\r\n}\r\n\r\n// Main Section\r\nfunc main() {\r\n\tregistry := commander.NewCommandRegistry()\r\n\r\n  registry.Register(NewYourCommand)\r\n\r\n\tregistry.Execute()\r\n}\r\n```\r\n\r\nNow you have a CLI tool with two commands: `help` and `your-command`.\r\n\r\n```\r\n❯ go build mytool.go\r\n\r\n❯ ./mytool\r\nyour-command <filename> [optional-argument]   This is my own command\r\nhelp [command]                                Display this help or a command specific help\r\n\r\n❯ ./mytool help your-command\r\nUsage: mytool your-command <filename> [optional-argument]\r\n\r\nThis is a very long\r\ndescription about this command.\r\n\r\nExamples:\r\n  mytool your-command test.txt\r\n  mytool your-command test.txt copy\r\n  mytool your-command test.txt move\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}